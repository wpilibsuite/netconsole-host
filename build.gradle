import org.gradle.internal.os.OperatingSystem

plugins {
    id 'net.ltgt.errorprone' version '0.0.8'
    id 'edu.wpi.first.wpilib.versioning.WPILibVersioningPlugin' version '1.2'
}

allprojects {
    repositories {
        mavenCentral()
    }
}

ext.setupDefines = { project, binaries ->
    binaries.all {
        if (project.hasProperty('debug')) {
            project.setupDebugDefines(cppCompiler, linker)
        } else {
            project.setupReleaseDefines(cppCompiler, linker)
        }
    }
}

apply from: "dependencies.gradle"

defineWpiUtilProperties()

def cppSetupModel = { project ->
    project.model {
        components {
            netconsolehost(NativeExecutableSpec) {
                targetPlatform 'arm'
                setupDefines(project, binaries)

                binaries.all {
                    tasks.withType(CppCompile) {
                        addWpiUtilLibraryLinks(it, linker, targetPlatform)
                    }
                }

                sources {
                    cpp {
                        source {
                            srcDirs = ["${rootDir}/src"]
                            includes = ["**/*.cpp"]
                        }
                        exportedHeaders {
                            srcDirs = [wpiUtilInclude]
                            includes = ['**/*.h']
                        }
                    }
                }
            }
        }
    }
}

ext.copyExecutableSetup = { pjt ->
    pjt.tasks.whenObjectAdded { task ->
        def name = task.name.toLowerCase()
        if (name.equals('linknetconsolehostexecutable')) {
            def libraryPath = task.outputFile.parent
            def library = file(task.outputFile.absolutePath)
            task.doLast {
                library.renameTo(file("netconsole-host"))
                copy {
                    from libraryPath
                    into rootDir
                }
            }
        }
    }
}


project (':netconsole') {
    apply plugin: 'cpp'
    
    apply from: "${rootDir}/toolchains/arm.gradle"
    
    cppSetupModel(project)
    
    copyExecutableSetup(project)
}

// Empty task for build so that zips will be
// built when running ./gradlew build
task build


task clean(type: Delete) {
    description = "Deletes the build directory"
    group = "Build"
    delete buildDir
    delete "${rootDir}/netconsole-host"
}

task wrapper(type: Wrapper) {
    gradleVersion = '3.0'
}
